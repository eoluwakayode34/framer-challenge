{"version":3,"sources":["blue.png","purp.png","black.png","green.png","Elements.js","modal.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","styled","header","Container","div","CardGrid","Card","Modal","isToggle","setToggle","children","initial","opacity","animate","exit","style","position","top","left","transfrom","y","onClick","Menu","viewBox","width","fill","d","App","useState","value","setValue","showAction","setShowAction","React","lastYPos","setLastYPos","useEffect","handleScroll","yPos","window","scrollY","addEventListener","removeEventListener","transition","duration","backgroundColor","h2","iniital","x","scale","type","min","max","onChange","e","target","background","src","purp","alt","intial","rotate","blue","whileHover","whileTap","drag","dragConstraints","right","black","img","green","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39b978b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blue.4b46210e.png\";","module.exports = __webpack_public_path__ + \"static/media/purp.b12a7d0e.png\";","module.exports = __webpack_public_path__ + \"static/media/black.630661b2.png\";","module.exports = __webpack_public_path__ + \"static/media/green.671f7afd.png\";","import styled from \"styled-components\";\r\n\r\nexport const Header = styled.header `\r\n  background:  var(--black);\r\n  color: white;\r\n  padding: 20px;\r\n  display: flex;\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  > svg {\r\n    margin-right: 20px;\r\n  }\r\n  > * {\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div `\r\n  width: 95%;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding-bottom: 60px;\r\n`;\r\n\r\nexport const CardGrid = styled.div `\r\n  display: grid;\r\n  grid-gap: 20px;\r\n`;\r\n\r\nexport const Card = styled.div `\r\n  border-radius: 15px;\r\n  padding: 20px;\r\n  color: white;\r\n  box-shadow: 1px 1px 15px rgba(0, 0, 0, 0.4);\r\n  h3 {\r\n    margin-top: 0;\r\n    font-size: 2rem;\r\n  }\r\n  img {\r\n    width: 100%;\r\n  }\r\n`;","import React from 'react'\r\nimport {AnimatePresence, motion} from 'framer-motion'\r\n\r\nconst Modal = ({isToggle, setToggle, children}) => {\r\n    return(\r\n        <AnimatePresence>\r\n            {\r\n                isToggle &&\r\n                <motion.div\r\n                initial={{opacity: 0}}\r\n                animate={{opacity: 1}}\r\n                exit={{opacity: 0}}\r\n                style={{\r\n                    position: 'fixed',\r\n                    top: '30px',\r\n                    left: '50%',\r\n                    transfrom: 'translate3d(-50%, 0 , 0)'\r\n                }}\r\n                \r\n                >\r\n                <motion.div\r\n                initial={{y: 50}}\r\n                animate={{y: 0}}\r\n                exit={{y:30}}\r\n                >\r\n               \r\n                    <button onClick={() => setToggle(false)}>Close</button>\r\n                    {children}\r\n                </motion.div>\r\n                </motion.div>\r\n            }\r\n        </AnimatePresence>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from \"react\";\r\n\r\nconst Menu = () => (\r\n  <svg viewBox=\"0 0 18 15\" width=\"20\">\r\n    <path\r\n      fill=\"#fff\"\r\n      d=\"M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.031C17.335,0,18,0.665,18,1.484L18,1.484z\"\r\n    />\r\n    <path\r\n      fill=\"#fff\"\r\n      d=\"M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0c0-0.82,0.665-1.484,1.484-1.484 h15.031C17.335,6.031,18,6.696,18,7.516L18,7.516z\"\r\n    />\r\n    <path\r\n      fill=\"#fff\"\r\n      d=\"M18,13.516C18,14.335,17.335,15,16.516,15H1.484C0.665,15,0,14.335,0,13.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.031C17.335,12.031,18,12.696,18,13.516L18,13.516z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport default Menu;\r\n","import React, {useState} from \"react\";\r\nimport { Card, CardGrid, Container, Header } from \"./Elements\";\r\nimport { motion   } from \"framer-motion\";\r\nimport Modal from './modal';\r\nimport \"./App.css\";\r\nimport Menu from \"./Menu\";\r\nimport blue from \"./blue.png\";\r\nimport purp from \"./purp.png\";\r\nimport black from \"./black.png\";\r\nimport green from \"./green.png\";\r\n\r\nfunction App() {\r\n  const [value, setValue] = useState(0);\r\n  const [isToggle, setToggle] = useState(false);\r\n  const [showAction, setShowAction] = useState(false);\r\n  const [lastYPos, setLastYPos] = React.useState(0);\r\n  React.useEffect(() => {\r\n    function handleScroll(){\r\n      const yPos = window.scrollY;\r\n      const isScrollingUp = yPos < lastYPos;\r\n\r\n      setShowAction(isScrollingUp);\r\n      setLastYPos(yPos);\r\n\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll, false);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll, false)\r\n    }\r\n  }, [lastYPos])\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0}}\r\n      animate={{ opacity: 1 }}\r\n      transition={{ duration: 3 }}\r\n    >\r\n\r\n      <motion.div \r\n\r\n      \r\n      initial={{opacity: 1, backgroundColor: 'black', y: 0}}\r\n\r\n      animate={{\r\n\r\n       \r\n        opacity: showAction ? [0, 0.5, 0.3, 0.3, 0] : 1 , y: showAction ? [80, 70, 30] : 0\r\n            }}\r\n            \r\n            transition={{duration: showAction ? 0  :[ .3] }}>\r\n      <Header\r\n      >\r\n        <Menu />\r\n        <h1>Header</h1>\r\n      </Header>\r\n      </motion.div>\r\n      <Container>\r\n       \r\n          <motion.h2 \r\n          \r\n          iniital={{x: 0, y: 0, scale: 1}}\r\n          animate={{x: [value + 'px', 2 * value + 'px', value + 'px'],\r\n          y: [value + 'px', value + 'px', value + 'px' ],\r\n          scale: value > 50 ? [0.5, 1, 2] : 1}} >Super Cool\r\n          </motion.h2>\r\n       \r\n        <button onClick={() => setToggle(true)}>Toggle</button>\r\n        <input type='range' min='-100' max='100'  value={value} onChange={(e) => setValue(e.target.value)} />\r\n        <CardGrid>\r\n          <Modal isToggle={isToggle} setToggle={setToggle}>\r\n          <Card style={{ background: \"var(--purp)\" }}>\r\n            <h3>Some card</h3>\r\n            <img src={purp} alt='mages' />\r\n          </Card>\r\n          </Modal>\r\n          <motion.div\r\n          intial={{x: 0, y: 0, opacity: 0}}\r\n          animate={{x: showAction ? 0 : [100, 200, -300, 200, 0],\r\n          rotate: showAction ? 0: [10, 20, 40, 40, 0]}}\r\n          transition={{duration: 1}}\r\n          >         \r\n               <Card style={{ background: \"var(--blue)\" }}>\r\n            <h3>Some card</h3>\r\n            <img src={blue} alt='mages'/>\r\n          </Card>       \r\n         \r\n          </motion.div>\r\n\r\n          <motion.div\r\n              whileHover={{scale: [1, 1.2, 1]}}\r\n              whileTap={{scale: 1}}\r\n              drag = 'x'\r\n              dragConstraints={{left: 0, right: 0}}\r\n\r\n          >\r\n          <Card style={{ background: \"var(--black)\" }}>\r\n            <h3>Some card</h3>\r\n            <img src={black}alt='mages' />\r\n          </Card>\r\n          </motion.div>\r\n         \r\n          <Card style={{ background: \"var(--green)\" }}>\r\n            <h3>Some card</h3>\r\n            \r\n            <motion.img\r\n            whileHover={{x: [200, 0, -200, 0, 200, 0, -200, 0,]}}\r\n            transition={{duration: 3}}\r\n            src={green}alt='mages' />\r\n          </Card>\r\n        </CardGrid>\r\n      </Container>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}